# -*- coding: utf-8 -*-
"""QiskitRun.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JdH-gCKfNocHpi_sJTO08Ies12TcFJQ_
"""

import json
# import matplotlib.pyplot as plt
import numpy as np
# !pip install qiskit_algorithms
# !pip install qiskit-machine-learning
# !pip install qiskit-optimization
# !pip install pylatexenc
import qiskit_algorithms
import qiskit_optimization
from IPython.display import clear_output
from qiskit import QuantumCircuit
from qiskit.circuit import ParameterVector
from qiskit.circuit.library import ZFeatureMap
from qiskit.quantum_info import SparsePauliOp
from qiskit_algorithms.utils import algorithm_globals
from qiskit_machine_learning.algorithms.classifiers import NeuralNetworkClassifier
from qiskit_machine_learning.neural_networks import EstimatorQNN, SamplerQNN
from sklearn.model_selection import train_test_split
from qiskit_algorithms.optimizers import COBYLA

# We now define a two qubit unitary as defined in [3]
def conv_circuit(params):
    target = QuantumCircuit(2)
    target.rz(-np.pi / 2, 1)
    target.cx(1, 0)
    target.rz(params[0], 0)
    target.ry(params[1], 1)
    target.cx(0, 1)
    target.ry(params[2], 1)
    target.cx(1, 0)
    target.rz(np.pi / 2, 0)
    return target


# Let's draw this circuit and see what it looks like
params = ParameterVector("θ", length=3)
circuit = conv_circuit(params)
# circuit.draw("mpl")

def conv_layer(num_qubits, param_prefix):
    qc = QuantumCircuit(num_qubits, name="Convolutional Layer")
    qubits = list(range(num_qubits))
    param_index = 0
    params = ParameterVector(param_prefix, length=num_qubits * 3)
    for q1, q2 in zip(qubits[0::2], qubits[1::2]):
        qc = qc.compose(conv_circuit(params[param_index : (param_index + 3)]), [q1, q2])
        qc.barrier()
        param_index += 3
    for q1, q2 in zip(qubits[1::2], qubits[2::2] + [0]):
        qc = qc.compose(conv_circuit(params[param_index : (param_index + 3)]), [q1, q2])
        qc.barrier()
        param_index += 3

    qc_inst = qc.to_instruction()

    qc = QuantumCircuit(num_qubits)
    qc.append(qc_inst, qubits)
    return qc


#circuit = conv_layer(4, "θ")
#circuit.decompose().draw("mpl")

def pool_circuit(params):
    target = QuantumCircuit(2)
    target.rz(-np.pi / 2, 1)
    target.cx(1, 0)
    target.rz(params[0], 0)
    target.ry(params[1], 1)
    target.cx(0, 1)
    target.ry(params[2], 1)

    return target


params = ParameterVector("θ", length=3)
circuit = pool_circuit(params)
# circuit.draw("mpl")

def pool_layer(sources, sinks, param_prefix):
    num_qubits = len(sources) + len(sinks)
    qc = QuantumCircuit(num_qubits, name="Pooling Layer")
    param_index = 0
    params = ParameterVector(param_prefix, length=num_qubits // 2 * 3)
    for source, sink in zip(sources, sinks):
        qc = qc.compose(pool_circuit(params[param_index : (param_index + 3)]), [source, sink])
        qc.barrier()
        param_index += 3

    qc_inst = qc.to_instruction()

    qc = QuantumCircuit(num_qubits)
    qc.append(qc_inst, range(num_qubits))
    return qc


#sources = [0, 1]
#sinks = [2, 3]
#circuit = pool_layer(sources, sinks, "θ")
#circuit.decompose().draw("mpl")

# !pip install tensorflow

#print("Image is:", print(train_images[0]))

import tensorflow as tf


import collections ###

# visualization tools

#X_train_numpy = X_train.detach().cpu().numpy()

#np_tensor = X_train.data[0].numpy()
#tf_tensor = tf.convert_to_tensor(np_tensor)

(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()

#print(x_train)
#print(y_train)
# Rescale the images from [0,255] to the [0.0,1.0] range.
x_train, x_test = x_train[..., np.newaxis]/255.0, x_test[..., np.newaxis]/255.0

print("Number of original training examples:", len(x_train))
print("Number of original test examples:", len(x_test))

# print (X_train.data[0])

#x_train_small = tf.image.resize(X_train, (4,4)).numpy()
#x_test_small = tf.image.resize(X_test, (4,4)).numpy()

def filter_36(x, y):
    keep = (y == 3) | (y == 6)
    x, y = x[keep], y[keep]
    y = y == 3
    return x,y

x_train, y_train = filter_36(x_train, y_train)
x_test, y_test = filter_36(x_test, y_test)

print("Number of filtered training examples:", len(x_train))
print("Number of filtered test examples:", len(x_test))

print(y_train[0])

plt.imshow(x_train[0, :, :, 0])
plt.colorbar()

x_train_small = tf.image.resize(x_train, (4,4)).numpy()
x_test_small = tf.image.resize(x_test, (4,4)).numpy()

print(y_train[0])

plt.imshow(x_train_small[0,:,:,0], vmin=0, vmax=1)
plt.colorbar()

def remove_contradicting(xs, ys):
    mapping = collections.defaultdict(set)
    orig_x = {}
    # Determine the set of labels for each unique image:
    for x,y in zip(xs,ys):
       orig_x[tuple(x.flatten())] = x
       mapping[tuple(x.flatten())].add(y)



    new_x = []
    new_y = []
    for flatten_x in mapping:
      x = orig_x[flatten_x]
      labels = mapping[flatten_x]
      if len(labels) == 1:
          new_x.append(x)
          new_y.append(next(iter(labels)))
      else:
          # Throw out images that match more than one label.
          pass

    num_uniq_3 = sum(1 for value in mapping.values() if len(value) == 1 and True in value)
    num_uniq_6 = sum(1 for value in mapping.values() if len(value) == 1 and False in value)
    num_uniq_both = sum(1 for value in mapping.values() if len(value) == 2)

    print("Number of unique images:", len(mapping.values()))
    print("Number of unique 3s: ", num_uniq_3)
    print("Number of unique 6s: ", num_uniq_6)
    print("Number of unique contradicting labels (both 3 and 6): ", num_uniq_both)
    print()
    print("Initial number of images: ", len(xs))
    print("Remaining non-contradicting unique images: ", len(new_x))

    return np.asarray(new_x), np.asarray(new_y)

import collections

#print(x_train_small)
#print(y_train)

resized_train_images, train_labels = remove_contradicting(x_train_small, y_train)
resized_test_images, test_labels = remove_contradicting(x_test_small, y_test)

feature_map = ZFeatureMap(16)
# feature_map.decompose().draw("mpl")

feature_map = ZFeatureMap(16)

ansatz = QuantumCircuit(16, name="Ansatz")

# # First Convolutional Layer
# ansatz.compose(conv_layer(64, "с1"), list(range(64)), inplace=True)

# # Second Pooling Layer
# ansatz.compose(pool_layer([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "p1"), list(range(64)), inplace=True)

# # Second Convolutional Layer
# ansatz.compose(conv_layer(32, "с2"), list(range(32, 64)), inplace=True)

# # Second Pooling Layer
# ansatz.compose(pool_layer([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "p2"), list(range(32, 64)), inplace=True)

# # Third Convolutional Layer
# ansatz.compose(conv_layer(16, "с3"), list(range(48, 64)), inplace=True)

# # Third Pooling Layer
# ansatz.compose(pool_layer([0, 1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14, 15], "p3"), list(range(48, 64)), inplace=True)

# # Fourth Convolutional Layer
# ansatz.compose(conv_layer(8, "c4"), list(range(56, 64)), inplace=True)

# # Fourth Pooling Layer
# ansatz.compose(pool_layer([0, 1, 2, 3], [4, 5, 6, 7], "p4"), list(range(56, 64)), inplace=True)

# # Fifth Convolutional Layer
# ansatz.compose(conv_layer(4, "c5"), list(range(60, 64)), inplace=True)

# # Fifth Pooling Layer
# ansatz.compose(pool_layer([0, 1], [2, 3], "p5"), list(range(60, 64)), inplace=True)

# # Sixth Convolutional Layer
# ansatz.compose(conv_layer(2, "c6"), list(range(62, 64)), inplace=True)

# # Sixth Pooling Layer
# ansatz.compose(pool_layer([0], [1], "p6"), list(range(62, 64)), inplace=True)

# First Convolutional Layer
ansatz.compose(conv_layer(16, "с1"), list(range(16)), inplace=True)

# First Pooling Layer
ansatz.compose(pool_layer([0, 1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14, 15], "p1"), list(range(16)), inplace=True)

# Second Convolutional Layer
ansatz.compose(conv_layer(8, "c2"), list(range(8, 16)), inplace=True)

# Second Pooling Layer
ansatz.compose(pool_layer([0, 1, 2, 3], [4, 5, 6, 7], "p2"), list(range(8, 16)), inplace=True)

# Third Convolutional Layer
ansatz.compose(conv_layer(4, "c3"), list(range(12, 16)), inplace=True)

# Third Pooling Layer
ansatz.compose(pool_layer([0, 1], [2, 3], "p3"), list(range(12, 16)), inplace=True)

# Fourth Convolutional Layer
ansatz.compose(conv_layer(2, "c4"), list(range(14, 16)), inplace=True)

# Fourth Pooling Layer
ansatz.compose(pool_layer([0], [1], "p4"), list(range(14, 16)), inplace=True)

# Combining the feature map and ansatz
circuit = QuantumCircuit(16)
circuit.compose(feature_map, range(16), inplace=True)
circuit.compose(ansatz, range(16), inplace=True)

observable = SparsePauliOp.from_list([("Z" + "I" * 15, 1)])

# we decompose the circuit for the QNN to avoid additional data copying
qnn = EstimatorQNN(
    circuit=circuit.decompose(),
    observables=observable,
    input_params=feature_map.parameters,
    weight_params=ansatz.parameters,
)

# circuit.draw("mpl")

def callback_graph(weights, obj_func_eval):
    clear_output(wait=True)
    objective_func_vals.append(obj_func_eval)
    plt.title("Objective function value against iteration")
    plt.xlabel("Iteration")
    plt.ylabel("Objective function value")
    plt.plot(range(len(objective_func_vals)), objective_func_vals)
    plt.show()

classifier = NeuralNetworkClassifier(
    qnn,
    optimizer=COBYLA(maxiter=50),  # Set max iterations here
    callback=callback_graph,
)

#print(y_bool)

y_int = []
for a in train_labels:
    if a:
        y_int.append(1)
    else:
        y_int.append(-1)

y1_int = []
for a in test_labels:
    if a:
        y1_int.append(1)
    else:
        y1_int.append(-1)

#print(y_int)

x_reshaped = []
x1_reshaped = []


for b in resized_train_images:
    x_reshaped.append(b.reshape(1,16))

for b in resized_test_images:
    x1_reshaped.append(b.reshape(1,16))

## Convert [[[ 16 values ]]] to [[16 values]]

final_x = []
final_x1 = []

for entry in x_reshaped:
    #print("entry \n" , entry[0])
    final_x.append(entry[0])

for entry in x1_reshaped:
    #print("entry \n" , entry[0])
    final_x1.append(entry[0])

objective_func_vals = []
plt.rcParams["figure.figsize"] = (12, 6)

#x = np.asarray(x_reshaped)
x = np.asarray(final_x)
y = np.asarray(y_int)

# print(x)
# print(y)


x = x[:100]
y = y[:100]

classifier.fit(x, y)

print(f"Accuracy from the train data : {np.round(100 * classifier.score(x, y), 2)}%")

x1 = np.asarray(final_x1)
y1 = np.asarray(y_int)

x1 = x1[:50]
y1 = y1[:50]
y_predict = classifier.predict(x1)

print(f"Accuracy from the test data : {np.round(100 * classifier.score(x1, y1), 2)}%")

# Let's see some examples in our dataset

fig, ax = plt.subplots(2, 2, figsize=(10, 6), subplot_kw={"xticks": [], "yticks": []})
for i in range(0, 4):
    ax[i // 2, i % 2].imshow(x1[i].reshape(4, 4), aspect="equal")
    if y_predict[i] == -1:
        ax[i // 2, i % 2].set_title("The QCNN predicts this is 6")
    if y_predict[i] == +1:
        ax[i // 2, i % 2].set_title("The QCNN predicts this 3")
plt.subplots_adjust(wspace=0.1, hspace=0.5)